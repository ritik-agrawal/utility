package rklab.utility.services;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import rklab.utility.dto.AwsPreSignedUrlRequest;
import rklab.utility.dto.AwsRequest;
import rklab.utility.dto.AwsUploadRequest;
import rklab.utility.expectations.ServerException;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.core.exception.SdkClientException;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.model.DeleteObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
import software.amazon.awssdk.services.s3.model.S3Exception;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;

import java.io.InputStream;
import java.net.URI;
import java.net.URL;

@Service
@Slf4j
public class AwsService {

    private static final String EXCEPTION_MESSAGE="Exception while %s. Error: %s";

    private S3Client getS3Client(AwsConfiguration config){
        return S3Client.builder()
                .endpointOverride(URI.create(config.getEndpoint()))
                .credentialsProvider(
                        StaticCredentialsProvider.create(
                                AwsBasicCredentials.create(
                                        config.getAccessKey(),
                                        config.getSecretKey()
                                )))
                .region(Region.of(config.getRegion()))
                .forcePathStyle(config.forcePathStyleUrl())
                .build();
    }

    private S3Presigner getPreSigner(AwsConfiguration config){
        return S3Presigner.builder()
                .endpointOverride(URI.create(config.getEndpoint()))
                .credentialsProvider(
                        StaticCredentialsProvider.create(
                                AwsBasicCredentials.create(
                                        config.getAccessKey(),
                                        config.getSecretKey()
                                )))
                .region(Region.of(config.getRegion()))
                .serviceConfiguration(S3Configuration.builder()
                        .pathStyleAccessEnabled(config.forcePathStyleUrl())
                        .build())
                .build();
    }

    /**
     * Function is used to upload an object to the aws s3 configured server.
     *
     * @param uploadRequest AwsUploadRequest
     * @return eTag: It's hash generated by server to authenticate the file received at client
     */
    public String upload(AwsUploadRequest uploadRequest) throws ServerException {
        try {
            var config = uploadRequest.getConfig();
            var s3Client = getS3Client(uploadRequest.getConfig());
            var putRequest = PutObjectRequest.builder()
                    .bucket(config.getBucket())
                    .key(uploadRequest.getKey())
                    .contentType(uploadRequest.getContentType())
                    .build();
            var response = s3Client.putObject(
                    putRequest,
                    RequestBody.fromBytes(uploadRequest.getContent())
            );
            log.info("Object uploaded to server successfully with eTag {}",response.eTag().replace("\"", ""));
            return response.eTag().replace("\"", "");
        } catch (S3Exception | SdkClientException e) {
            throw new ServerException(String.format(EXCEPTION_MESSAGE,"uploading object to server",e.getMessage()));
        }
    }

    /**
     * Function is used to get uploaded objects input stream.
     *
     * @param request AwsRequest
     * @return InputStream of the request object
     */
    public InputStream download(AwsRequest request) throws ServerException {
        try {
            var config = request.getConfig();
            var s3Client = getS3Client(config);
            var getRequest = GetObjectRequest.builder()
                    .bucket(config.getBucket())
                    .key(request.getKey())
                    .build();
            return s3Client.getObject(getRequest);
        }
        catch (SdkClientException | S3Exception e){
            throw new ServerException(String.format(EXCEPTION_MESSAGE, "downloading object", e.getMessage()));
        }
    }

    /**
     * Function is used to delete an object in the configured server
     *
     * @param request Aws Request
     * @return true if deleted
     * @throws ServerException if exception while deleting the file
     */
    public boolean delete(AwsRequest request) throws ServerException {
        try{
            var config = request.getConfig();
            var s3Client = getS3Client(config);
            var deleteRequest = DeleteObjectRequest.builder()
                    .bucket(config.getBucket())
                    .key(request.getKey())
                    .build();
            s3Client.deleteObject(deleteRequest);
            log.info("Object with key {} deleted successfully.",request.getKey());
            return true;
        }
        catch (SdkClientException | S3Exception e){
            throw new ServerException(String.format(EXCEPTION_MESSAGE, "deleting object", e.getMessage()));
        }
    }

    /**
     * Function fetches pre-signed url. These are used to get temporary access to an object
     *
     * @param request AwsPreSignedUrlRequest
     * @return URL
     * @throws ServerException if exception while fetching presigned url
     */
    public URL fetchPreSignedUrl(AwsPreSignedUrlRequest request) throws ServerException {
        try {
            var config = request.getConfig();
            var s3PreSigner = getPreSigner(config);
            var getObjectRequest = GetObjectRequest.builder()
                    .bucket(config.getBucket())
                    .key(request.getKey())
                    .build();
            var preSignRequest = GetObjectPresignRequest.builder()
                    .getObjectRequest(getObjectRequest)
                    .signatureDuration(request.getDuration())
                    .build();
            return s3PreSigner.presignGetObject(preSignRequest).url();
        } catch (SdkClientException | S3Exception e){
            throw new ServerException(String.format(EXCEPTION_MESSAGE, "fetching pre-signed url", e.getMessage()));
        }
    }



}
